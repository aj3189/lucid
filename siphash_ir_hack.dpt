
//Siphash constants
const int key0 = 0x33323130;
const int key1 = 0x42413938;
const int c0 = 0x70736575;
const int c1 = 0x6e646f6d;
const int c2 = 0x6e657261;
const int c3 = 0x79746573;
const int s0 = 0x43415445;
const int s1 = 0x2C255655;
const int s2 = 0x5D574351;
const int s3 = 0x3B355C4B;

const int <<9>> SERVER_PORT = 128; //jc5

//Callback types: different things to do after hash is calculated
const int<<8>> Callback_SYNACK = 0; 
const int<<8>> Callback_TAGACK = 1; 
const int <<32>> MAX_SYNCOOKIE_AGE = 3; 


global Array.t<<1>> bf_arr1 = Array.create(1024);


global Array.t<<1>> bf_arr2 = Array.create(1024);


global Array.t<<32>> ts_delta_arr = Array.create(1);


entry event iptcp_to_server_syn(int<<32>> src,int<<32>> dst,int<<16>> src_port,int<<16>> dst_port,int<<32>> seq_no) ;

event siphash_intermediate(int<<32>> src,int<<32>> dst,int<<16>> src_port,int<<16>> dst_port,int<<32>> _seq_no,int<<32>> _ack_no,int<<32>> cookie_time,int<<32>> v0,int<<32>> v1,int<<32>> v2,int<<32>> v3,int<<32>> a0,int<<32>> a1,int<<32>> a2,int<<32>> a3,int<<8>> round,int<<8>> callback_type,int<<8>> egr_port) ;

exit event iptcp_craft_out(int<<32>> src,int<<32>> dst,int<<16>> src_port,int<<16>> dst_port,int<<32>> seq_no,int<<32>> ack_no) ;

event iptcp_craft_out_dummy(int<<32>> src,int<<32>> dst,int<<16>> src_port,int<<16>> dst_port,int<<32>> seq_no,int<<32>> ack_no) ;

memop re12351sdaCheckThenSet(int<<'memvalsize>> memval,int<<'memvalsize>> newval)
 {if (memval==0) {
return newval;
} else {
return memval;
}}

global Array.t<<8>> re_check = Array.create(4096);


memop re_checkmemop0(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+0>1;
bool b2 = memval+g>2;
if (b1&&b2) {
cell1 = f+memval;
} else {
if (true) {
cell1 = f+5;
} 
}
if (true) {
return cell1;
} }

memop re_checkmemop3(int<<8>> memval,int<<8>> f,int<<8>> g)
 {bool b1 = memval+f!=8;
bool b2 = memval+f>2;
if (b1&&b2) {
cell1 = 1&1;
} else {
if (true) {
cell1 = g^^8;
} 
}
if (true) {
return cell1;
} }

handle iptcp_craft_out_dummy(int<<32>> src,int<<32>> dst,int<<16>> src_port,int<<16>> dst_port,int<<32>> seq_no,int<<32>> ack_no) {
printf("Dummy." );
if ({bool ansre_check = true;
int<<'idxvalsize>> re_checkidx = (int<<32>>)hash<<12>>(1,src,dst,src_port,dst_port);
int<<8>> f_synthesized_meta_varre_check = 0;
int<<8>> g_synthesized_meta_varre_check = 0;
int<<8>> memop_synthesized_meta_varre_check = 0;
f_synthesized_meta_varre_check = 71;
g_synthesized_meta_varre_check = 13;
memop_synthesized_meta_varre_check = 3;
int<<8>> resre_check = 0;
match memop_synthesized_meta_varre_check with 
| 3 -> {
resre_check = Array.update_complex(re_check,re_checkidx,re_checkmemop3,f_synthesized_meta_varre_check,g_synthesized_meta_varre_check,0);
}
printf("state machine transitioned to %d" resre_check);
match resre_check with 
| 5 -> {
ansre_check = true;
}
| _ -> {
ansre_check = false;
}; return ansre_check}) {
printf("Good" );
} 
}

handle siphash_intermediate(int<<32>> src,int<<32>> dst,int<<16>> src_port,int<<16>> dst_port,int<<32>> _seq_no,int<<32>> _ack_no,int<<32>> cookie_time,int<<32>> v0,int<<32>> v1,int<<32>> v2,int<<32>> v3,int<<32>> a0,int<<32>> a1,int<<32>> a2,int<<32>> a3,int<<8>> round,int<<8>> callback_type,int<<8>> egr_port) {
if (round==0) {
v0 = key0^^c0;
v1 = key1^^c1;
v2 = key0^^c2;
v3 = key1^^c3;
} 
if (round==0||round==1) {
a0 = hash<<32>>(1,src);
} else {
if (round==2||round==3) {
a0 = hash<<32>>(1,dst);
} else {
if (round==4||round==5) {
a0 = hash<<32>>(1,src_port,dst_port);
} else {
if (round==6||round==7) {
a0 = hash<<32>>(1,_seq_no);
} 
}
}
}
int<<32>> msg_var = a0;
int<<32>> r_ack_no = hash<<32>>(1,_ack_no);
if (round==13&&callback_type==Callback_TAGACK&&cookie_time==0||cookie_time==1) {
generate iptcp_craft_out(src,dst,src_port,dst_port,_seq_no,_ack_no);
generate iptcp_craft_out_dummy(src,dst,src_port,dst_port,_seq_no,_ack_no);
} else {
if (round==13&&callback_type==Callback_SYNACK) {
int<<32>> seq_no_plus1 = _seq_no+1;
int<<32>> cookie_out = hash<<32>>(1,cookie_time);
generate iptcp_craft_out(dst,src,dst_port,src_port,cookie_out,seq_no_plus1);
generate iptcp_craft_out_dummy(dst,src,dst_port,src_port,cookie_out,seq_no_plus1);
} else {
if (round==12) {
a1 = v0^^v1;
a2 = v2^^v3;
a3 = a1^^a2;
int<<32>> hash_value = hash<<32>>(1,a3);
cookie_time = hash_value+cookie_time;
} else {
if (1==1) {
if (round==0||round==2||round==4||round==6) {
v3 = v3^^a0;
} else {
if (round==8) {
v2 = v2^^255;
} 
}
a0 = v0+v1;
a2 = v2+v3;
a1 = hash<<32>>(1,[26 : 0]v1,[31 : 27]v1);
a3 = hash<<32>>(1,[23 : 0]v1,[31 : 24]v1);
v1 = a1^^a0;
v3 = a3^^a2;
v0 = hash<<32>>(1,[15 : 0]a0,[31 : 16]a0);
v2 = a2;
a2 = v2+v1;
a0 = v0+v3;
a1 = hash<<32>>(1,[18 : 0]v1,[31 : 19]v1);
a3 = hash<<32>>(1,[24 : 0]v3,[31 : 25]v3);
v1 = a1^^a2;
v3 = a3^^a0;
v2 = hash<<32>>(1,[15 : 0]a2,[31 : 16]a2);
} 
}
}
}
if (round==12&&callback_type==Callback_TAGACK) {
cookie_time = r_ack_no-cookie_time;
} else {
if (round==1||round==3||round==5||round==7) {
v0 = a0^^msg_var;
} else {
if (1==1) {
v0 = a0;
} 
}
}
if (round!=13) {
generate siphash_intermediate(src,dst,src_port,dst_port,_seq_no,_ack_no,cookie_time,v0,v1,v2,v3,a0,a1,a2,a3,round+1,callback_type,egr_port);
} 
if ({bool ansre_check = true;
int<<'idxvalsize>> re_checkidx = (int<<32>>)hash<<12>>(1,src,dst,src_port,dst_port);
int<<8>> f_synthesized_meta_varre_check = 0;
int<<8>> g_synthesized_meta_varre_check = 0;
int<<8>> memop_synthesized_meta_varre_check = 0;
f_synthesized_meta_varre_check = 252;
g_synthesized_meta_varre_check = 63;
memop_synthesized_meta_varre_check = 0;
int<<8>> resre_check = 0;
match memop_synthesized_meta_varre_check with 
| 0 -> {
resre_check = Array.update_complex(re_check,re_checkidx,re_checkmemop0,f_synthesized_meta_varre_check,g_synthesized_meta_varre_check,0);
}
printf("state machine transitioned to %d" resre_check);
match resre_check with 
| 5 -> {
ansre_check = true;
}
| _ -> {
ansre_check = false;
}; return ansre_check}) {
printf("Good" );
} 
}

fun int<<32>> read_c_time() {
int<<32>> stored_d = Array.get(ts_delta_arr,0);
int<<32>> t = Sys.time()-stored_d;
return t>>12;
}

handle iptcp_to_server_syn(int<<32>> src,int<<32>> dst,int<<16>> src_port,int<<16>> dst_port,int<<32>> seq_no) {
int<<32>> cookie_time = hash<<32>>(1,read_c_time());
generate siphash_intermediate(src,dst,src_port,dst_port,seq_no,0,cookie_time,0,0,0,0,0,0,0,0,0,Callback_SYNACK,0);
if ({bool ansre_check = true;
int<<'idxvalsize>> re_checkidx = (int<<32>>)hash<<12>>(1,src,dst,src_port,dst_port);
int<<8>> f_synthesized_meta_varre_check = 0;
int<<8>> g_synthesized_meta_varre_check = 0;
int<<8>> memop_synthesized_meta_varre_check = 0;
f_synthesized_meta_varre_check = 2;
g_synthesized_meta_varre_check = 253;
memop_synthesized_meta_varre_check = 3;
int<<8>> resre_check = 0;
match memop_synthesized_meta_varre_check with 
| 3 -> {
resre_check = Array.update_complex(re_check,re_checkidx,re_checkmemop3,f_synthesized_meta_varre_check,g_synthesized_meta_varre_check,0);
}
printf("state machine transitioned to %d" resre_check);
match resre_check with 
| 5 -> {
ansre_check = true;
}
| _ -> {
ansre_check = false;
}; return ansre_check}) {
printf("Good" );
} 
}

fun void add_to_filter(int<<10>> index1,int<<10>> index2) {
Array.set(bf_arr1,index1,1);
Array.set(bf_arr2,index2,1);
}

fun bool in_filter(int<<10>> index1,int<<10>> index2) {
bool is_member = false;
int<<1>> check1 = Array.get(bf_arr1,index1);
int<<1>> check2 = Array.get(bf_arr2,index2);
is_member = check1==1&&check2==1;
return is_member;
}